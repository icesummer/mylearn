1、代理模式

	三种：
	
	1、基本的
	
		1、目标接口
		
		2、目标类
		
		3、代理类
	
	2、JDK的代理
	
		1、目标接口
		
		2、目标类
		
		3、拦截器   实现了InvocationHandler这个接口
		
		4、代理类  
		
			Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(),interceptor);
			
				第一个参数：目标对象的类加载器
				
				第二个参数：目标对象的所有的接口
				
				第三个参数： 拦截器
				
		特点：代理对象和目标对象实现了共同的接口
		
		
		代理对象的方法实际上是拦截器中invoke方法体中的内容
		
						拦截器中的切面+目标方法
	
	3、cglib的代理
	
		1、目标类
		
		2、拦截器   实现了MethodInterceptor接口
		
		3、代理类
		
				Enhancer enhancer = new Enhancer();//Enhancer  加强
				enhancer.setSuperclass(PersonDaoImpl.class);//给要动态产生的代理类设置父类
				enhancer.setCallback(this);//回调函数  拦截器的对象
				return enhancer.create();//产生代理对象
				
		特点：代理类与目标类是继承关系    目标类是父类   代理类是子类
		
		代理类的方法中的内容是由拦截器中的intercept方法体组成的
		
2、spring AOP

	1、AOP的概念：
	
			切面：权限、事务、日志
			
			通知：  切面中的方法
			
			
			切入点：满足切点的表达式的类可以生成代理类
			
			
			连接点：在客户端调用的目标方法
			
		
		通知是切面中的方法
		
		连接点是切入点的子集
		
		切入点是目标类的方法的子集
		
		织入：把通知和目标方法结合在一起的过程
		
		AOP代理：代理类
		
		目标对象

	1、在配置文件中：
	
		1、应该声明目标类和切面
		
			<bean id="personDaoImpl" class="cn.itcast526.spring.aopxml.PersonDaoImpl"></bean>
			
			<bean id="transaction" class="cn.itcast526.spring.aopxml.Transaction"></bean> 
			
		2、进行<aop:config>的配置
		
			<aop:config>
		    <!-- 
		    	指明切面类
		     -->
		    	<aop:aspect ref="transaction">
		    	<!-- 
		    		id表示切入点的唯一标识
		    		
		    		expression 指的就是切入点的表达式
		    		
		    			execution()
		    			
		    				modifiers-pattern?   可以出现也可以不出现
		    				ret-type-pattern    必须出现
		    				declaring-type-pattern?  可以出现可以不出现
		    				
		    				name-pattern   必须出现
		    				
		    				param-pattern   必须出现
		    				
		    					()   没有任何参数
		    					
		    					(*)   只有一个参数，但是这个参数的类型可以是任意类型
		    					
		    					(*,String) 两个参数，第一个参数任意类型  第二个参数是String类型
		    					
		    					(..)  任意多个参数个数  任意类型
		    		
		    			只要满足切入点的表达式，就可以产生代理类
		    	 -->
		    	 
		    	 <!-- 
		    	 	execution(* cn.itcast526.spring.aopxml.PersonDaoImpl.*(..))
		    	 	指的是PersonDaoImpl的所有的方法
		    	  -->
		    		<aop:pointcut id="perform" expression="execution(* cn.itcast526.spring.aopxml.PersonDaoImpl.*(..))"/>
		    	<!-- 
		    		前置通知
		    	 -->
		    	 <!-- 
		    		<aop:before method="beginTransaction" pointcut-ref="perform"/>
		    	 -->
		    	<!-- 
		    		后置通知
		    		returning  目标类的目标方法的返回值
		    	 -->
		    	<!--  
		    	 	<aop:after-returning method="commit" pointcut-ref="perform" returning="variable"/>
		    	 -->
		    	 <!-- 
		    	 	最终通知
		    	  -->
		    	<!-- 
		    	  <aop:after method="finallyMethod" pointcut-ref="perform"/>
		    	  -->
		    	  <!-- 
		    	  	环绕通知
		    	   -->
		    	   <!-- 
		    	  <aop:around method="aroundMethod" pointcut-ref="perform"/>  
		    	   -->
		    	   <!-- 
		    	   	异常通知
		    	   	
		    	   		throwing  要抛出的异常的引用
		    	    -->
		    	    
		    	    <aop:after-throwing method="throwingMethod" pointcut-ref="perform" throwing="ex"/>
		    	</aop:aspect>
		    </aop:config>
		    
	2、java类有：
		
			接口    如果有  则采取的jdkproxy   如果没有采取  cglibproxy
			
			目标类
			
			切面
			
			
	注解的配置：
	
	
		1、在配置文件中：
			
			导入基于aop的注解解析器
			
				<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
				
			声明目标类和切面
			
		2、在类中
		
				在切面类中，在类上使用@Aspect，标明这个类是一个切面类
				
				在方法中，标明两部分的内容：
				
					切入点的内容：
				
					@Pointcut("execution(* cn.itcast526.spring.aopannotation.PersonDaoImpl.*(..))")
					private void aaa(){}
					
					
					通知的内容：
					
					@Before("aaa()")
					public void beginTransaction(JoinPoint joinPoint){
						System.out.println("bbbbbbbbb");
					}
					
		
	
		