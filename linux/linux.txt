shell变成之变量
用户自定义变量
环境变量 
预定义变量（位置参与变量）bash中已经定义好的变量
bash中默认变量类型是字符串型，
bname=value		等号两边不能有空格
echo $bname		使用$符调用变量
x=123
x="$x"456
echo $x			结果是叠加123456
lsb_release -a 查看centos版本


Linux网络管理：

1、ISO/OSI七层模型，TCP/IP四层模型是从七层模型之上演变的
	（ISO国际标准化认证）
	（OSI开放系统互联模型）
1.1	物理层协议->数据链路层协议->网络层协议->传输层协议->会话层协议->表示层协议->应用层协议
						7 应用层：老板

						6 表示层：相当于公司中演示稿老板、替老板写信的助理

						5 会话层：相当于公司中收寄信、写信封与拆信封的秘书

						4 传输层：相当于公司中跑邮局的送信职员(数据可靠性，目标端口)

						3 网络层：相当于邮局中的排序工人（确定IP）

						2 数据链路层：相当于邮局中的装拆箱工人

						1 物理层：相当于邮局中的搬运工人[1]

	1-4层是实际的数据传输，后三层是给用户服务
	
	物理层传输单位是--		比特 		负责真正的数据传输
	数据链路层的传输单位-- 	数据帧
	网络层协议--			报文		（包含ip信息）
	传输层的传输单位--		TPDU		(找准端口)

1.2	TCP/IP四层模型：从ISO/OSI七层模型之上演变而来
	应用层(5-7)->
	传输层(4)->TCP(传输控制协议)，UDP(用户数据报协议)
	网际互联层(3)->
	网络接口层(1-2)
	局域网是通过mac地址传输，外网通过ip传输
	
	1.2.1	TCP/IP 三次握手
			面向连接的协议，可靠的（类打电话）
			
	1.2.1	UDP
			速度更快，不可靠的（丢失），（类发短信QQ）

1.3	OSI模型是通用模型，在协议开发前设计（如smtp,,等）；TCP/IP协议是先有协议在简历模型，只试用与TCP/IP网络
	
2.1	IP地址详解：
	IPv4包含包头，源IP(2^32个)，目的IP，
	我们可用的ip地址在1-223之间，分3类
	A：1.0.0.0--126.255.255.255		第一个代表网段，后三个代表同一网段的不同主机共2^24-2=126个
	B：128.0.0.0--191.255.255.255	前两个代表一个网段，后两个代表一个主机（）2^16-2=16384
	C：192.0.0.0-223.255.255.255	前三个代表不同网段，后一位代表不同主机2^8-2=2097152个
	 ：127.0.0.1
	DEF:其他为私有IP范围（内网IP）
	A	10.0.0.0-10.255.255.255		子网掩码为255.x.x.x				255对应的ip位置变化表示网段变化，x变化表示同一个网段
	B	172.16.0.0-172.31.255.255	子网掩码为255.255.x.x			同上
	C	192.168.0.0-192.168.255.255	子网掩码为255.255.255.x			同上
	子网掩码：
	ip和子网掩码不能单独使用，是同时使用；
	*即使一个IP是B类，但是子网掩码是C类的，按C类的来；172.16.2.121	255.255.255.0，范围是172.16.2.0-172.16.2.255
	
	网络地址：通常是最开始的ip（计算方式：ip与子网掩码换算成二进制位：对应的数字相与，假为0，真为1）-见变长子网掩码及子网.png
	广播地址：通常是最后一个ip（同理）
	
2.2	端口的作用：
	端口号是什么（ip是门牌号，端口就是具体的收件人）
		(ICP、UDP协议的源，目标端口分别有2^16=65535个)
	端口号分类
	常见端口号：
	FTP:20(数据传输) 21(登录传输)
	SSH:(安全shell协议)22
	telnet:(远程登录协议)23	不安全，用ssh代替
	DNS(域名系统) 53
	http(超文本传输):	80
	SMTP(简单邮件)	25
	PoP3(邮局协议3代)	110
	netstat -an
		-a:查看所有连接和监听端口
		-n:显示ip地址和端口号，不显示域名服务名
	TCP端口状态：listening监听状态，established连接正在使用中
	
2.3	DNS：域名系统的缩写，由解析器和域名服务器组成的。 域名服务器是指保存有该网络中所有主机的域名和对应IP地址，并具有将域名转换为IP地址功能的服务器
	
	
	

	
Linux的软件安装：
	软件包管理简介
	分类：
		源代码包（脚本安装包），开源程序，自由修改，安全性高tar，组合软件安装步骤多；慢(源码编译时间比较长)
		二进制包（rpm包，系统默认包）安装快，不灵活，无源代码，rpm依赖性
	：
	rpm命令安装
		命名规则
		rmp -ivh xxx.rpm(包全名)
			-i(install)
			-v(verbose)显示详细信息
			-h(hash)显示进度
			--nodeps不检测依赖性
		rpm升级：
		rpm -Uvh 包全名	
			-U(upgrade) 升级（需要先卸载依赖的包，可用nodeps避免，但是不建议使用）
			--nodeps不检测依赖性
		rpm卸载
		rpm -e(erase) 包名
		rpm查询
		rpm -q 包名
			-a 所有的rpm包 rpm -qa| grep httpd...
			-i 查询软件信息(information)
			-p 查询对应未安装包的信息rpm -qip xxx
			-l 包列表
		
	yum在线安装rmp包(只能实现安装卸载) |||最小化安装，最好不卸载
		yum -y install xxx.(centos 的yum是免费的)
	源码包管理
	脚本安装包（实际还是源码或二进制包安装）
	搭建本地yum（挂载yum光盘）
	 list：yum源的所有rpm包；
	 search:搜索服务器上所有和关键字相关的包
	 -y install 包名	(yum -y install gcc:c语言编译器，源码包安装必须这个)
	 -y update 包名		升级
	 -y remove 包名		卸载(最好不卸载(依赖...))
	yum install --installroot=/usr/src/ vim		将软件安装到指定目录
	
	
网络：
	配置IP地址：
		1）临时配置：ifconfig ech0 ip netmask 掩码
		2）使用setup工具（红帽）
		3）修改配置文件：
			1./etc/sysconfig/network-scripts/ifcfg-eth0	--网卡配置文件（网卡信息文件01.png）
			2./etc/sysconfig/network 					--主机名文件（NETWORKING=yes，HOSTNAME=localhost.localdomain） --hostname imooc 将主机名改为imooc
			3.DNS文件
	
	
	
	命令：
	pwd：查看路径
	

mkdir -p 目录/文件名 创建文件夹，(-p表示可向下递归创建) 
	
# 权限管理
-rw-r--r--(权限位10位)
第一位：文件类型（-文件 d目录 l软链接）
2-4位：u所有者（rwx权限）
5-7位：g所有组
9-10位：o其他人
r读 w写 x执行
chmod 权限命令
chmod u+? :给所属用户赋予？权限
chmod g+?,o+?:把权限添加给用户组和其他人
修改权限命令：chmod [选项] 模式 文件名
 选项：-R 递归
 模式：[ugoa][+-=][rwx]	[mode=421] 
:chmod u+x,g+w,o+w cangls 给cangls的所属用户赋予执行，给所在组及其他赋予写权限；
:chmod -R ugo=rwx liangls 给liangls及子文件赋予[用户，所在组，其他]读写执行权限
:chmod -R ug=rwx,o=r liangls 
简化：数字化
r=4
w=2
x=1
rwxr-xr-x:755 	chmod 755 cls
拥有写的权限，才可以对目录下的文件进行删除等操作，所以如果对某个文件进行删除操作，必须拥有这个文件所在目录的所有权限（进入文件夹需要x，读取文件夹内容需要r，删除需要w）
		
创建用户 icy useradd icy; passwd icy
创建用户组 icy groupadd -g 101 gicy
修改用户密码：passwd icy

修改文件的拥有者：
chown 用户名 文件名		chown icy:root filedd 将filedd所属用户改为icy，所属组为root
修改文件的所属组：
chgrp 组名 文件名		chgrp icysummer filedd

默认权限：
umask=022
建立的文件默认权限为：666-umask=644		即：(rw-rw-rw)-(---w--w--)=(rw-r--r--)
建立的目录默认权限为：777-umask=755	

也可以这样理解 ： 
文件权限 ： 110 110 110
进行掩码 ： 000 010 010
也就是 644
掩码结果 ： 110 100 100
----------------------------------------------------------------------------
centos7下的端口例外
	  -----------------LINUX----------------
  linux 进程操作
  ：查找某进程 ps aux(-ef) | grep java
  ：查找所有进程 ps -ef 
  shutdown now立即关机	 shutdown +2两分后关机
	   关闭iptables 和 selinux 方法： #service iptables stop #关闭iptables服务#chkconfig iptables off #开机不启动关闭
   systemcttl stop firewalld.service
   CentOS 7.0默认使用的是firewall作为防火墙：
	firewall：
	systemctl start firewalld.service#启动firewall
	systemctl stop firewalld.service#停止firewall
	systemctl enable firewalld.service#允许firewall开机启动
	systemctl disable firewalld.service#禁止firewall开机启动
	systemctl is-enabled httpd.service：查看httpd服务是否开机启动
	systemctl status firewalld.service	#firewall状态
	firewall-cmd --state #查看默认防火墙状态
	firewall-cmd --permanent --list-ports #列出防火墙的例外
	firewall-cmd --permanent --add-port=8080/tcp --permanent #添加列外端口| --permanent表示永久生效
	firewall-cmd --zone=public --remove-port=8999/udp --permanent	#删除例外端口
	firewall-cmd --complete-reload
	这里改为iptables防火墙：
	firewall：
	systemctl start iptables.service
	Centos7以下：
	将80端口设置为例外/sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT
	然后保存：/etc/rc.d/init.d/iptables save
	查看打开的端口：/etc/init.d/iptables status
	chkconfig   iptables on|off	永久开启|关闭
	service iptables start|restart|stop
	http://www.cnblogs.com/eaglezb/p/6073739.html
  -----------------LINUX----------------
	chkconfig --list | grep mysql	查看是否开机启动  新版：systemctl list-unit-files | grep mysql
	chkconfig mysqld on
	# /etc/init.d/mysqld start     
	# service mysqld start 
	
	nux 安装mysql数据库——yum安装法


----------------------------------------------------------------------------






apache+tomcat配置：
http://xslwahaha.blog.51cto.com/4738972/1741259
（1）、编译安装mod_jk
下载地址：http://tomcat.apache.org/connectors-doc/
# yum -y install httpd 
# yum -y install httpd-devel
# tar xf tomcat-connectors-1.2.42-src.tar.gz 
# cd /root/tomcat-connectors-1.2.42-src/native
# ./configure --with-apxs=apxs的路径 (如果没有apxs程序，需要安装httpd-devel包，which apxs查看路径)
# make && make install


1、安装tomcat
2、安装httpd
3、编译安装mod_jk
	apache使用mod_jk模块与tomcat进行通信（二之一）
	mod_jk是ASF的一个项目，是一个工作于apache端基于AJP协议与Tomcat通信的连接器，它是apache的一个模块，是AJP协议的客户端（服务端是Tomcat的AJP连接器）。
	具体安装见下文。
4、配置
	编辑/etc/httpd/conf.d/proxy.conf 
	编辑/etc/httpd/conf.d/httpd-jk.conf	使用LoadModule指令在apache中装载模块外
	编辑/etc/httpd/conf.d/workers.properties	mod_jk还需要在apache的主配置文件中设置其它一些指令来配置其工作属性
5、 在Tomcat的配置中设置jvmRoute：<Engine name="Catalina" defaultHost="localhost" jvmRoute="TomcatA"> 
6、以下是详细配置

	
四、将httpd+tomcat绑定
ajp链接
tomcat结合apache一起使用
apache与tomcat结合使用时，有2种模块可以与tomcat进行通信，这两种模块分别是mod_proxy模块和mod_jk模块。mod_proxy模块是apache自带的模块，因此要使用该模块，只需要启用该模块就行了。而mod_jk模块，需要下载并进行手动编译，使其成为apache的一个模块。

mod_proxy模块可以基于http协议与tomcat进行通信，也可以基于ajp协议与tomcat进行通信；而mod_jk模块只能基于ajp协议与tomcat进行通信。

apache使用mod_proxy模块与tomcat进行通信
其步骤如下：
（1）、apache使用mod_proxy模块与tomcat通信时，需要加载proxy_module、proxy_http_module、proxy_ajp_module、proxy_balancer_module（负载均衡时需要使用该模块）等这些模块。
# yum -y install httpd

查看apache是否已经启用该模块了。
# httpd -M | grep proxy
httpd: Could not reliably determine the server's fully qualified domain name, using localhost.localdomain for ServerName
 proxy_module (shared)
 proxy_balancer_module (shared)
 proxy_ftp_module (shared)
 proxy_http_module (shared)
 proxy_ajp_module (shared)
 proxy_connect_module (shared)

（2）、编辑httpd的配置文件/etc/httpd/conf.d/proxy.conf文件，添加如下内容：
proxyvia off
proxypreservehost on
proxyrequests off
proxypass / ajp://172.16.1.100/
proxypassreverse  / ajp://172.16.1.100/
        

如果你的http版本是2.4的话，其配置如下：
proxyvia off
proxypreservehost on
proxyrequests off
<Proxy *>
  Require all granted
</Proxy>
proxypass / ajp://172.16.1.100/
proxypassreverse  / ajp://172.16.1.100/
<Location  / >
  Require all granted
</Location>
                                           
如果要想基于http连接器协议与tomcat工作的话，只需要将ajp改为http即可。其他的配置都不变。   
关于如上apache指令的说明：
ProxyPreserveHost {On|Off}：如果启用此功能，代理会将用户请求报文中的Host:行发送给后端的服务器，而不再使用ProxyPass指定的服务器地址。如果想在反向代理中支持虚拟主机，则需要开启此项，否则就无需打开此功能。
ProxyVia  {On|Off|Full|Block}：用于控制在http首部是否使用Via:，主要用于在多级代理中控制代理请求的流向。默认为Off，即不启用此功能；On表示每个请求和响应报文均添加Via:；Full表示每个Via:行都会添加当前apache服务器的版本号信息；Block表示每个代理请求报文中的Via：都会被移除。
ProxyPassReverse：用于让apache调整HTTP重定向响应报文中的Location、Content-Location及URI标签所对应的URL，在反向代理环境中必须使用此指令避免重定向报文绕过proxy服务器。
ProxyRequests {On|Off}：是否开启apache正向代理的功能；启用此项时为了代理http协议必须启用proxy_http_module模块。同时，如果为apache设置了ProxyPass，则必须将ProxyRequests设置为Off。

ProxyPass  [path]  !|url  [key=value key=value ...]]：将后端服务器某URL与当前服务器的某虚拟路径关联起来作为提供服务的路径，path为当前服务器上的某虚拟路径，url为后端服务器上某URL路径。使用此指令时必须将ProxyRequests的值设置为Off。需要注意的是，如果path以“/”结尾，则对应的url也必须以“/”结尾，反之亦然。
另外，mod_proxy模块在httpd 2.1的版本之后支持与后端服务器的连接池功能，连接在按需创建在可以保存至连接池中以备进一步使用。连接池大小或其它设定可以通过在ProxyPass中使用key=value的方式定义。常用的key如下所示：
◇ min：连接池的最小容量，此值与实际连接个数无关，仅表示连接池最小要初始化的空间大小。
◇ max：连接池的最大容量，每个MPM都有自己独立的容量；都值与MPM本身有关，如Prefork的总是为1，而其它的则取决于ThreadsPerChild指令的值。
◇ loadfactor：用于负载均衡集群配置中，定义对应后端服务器的权重，取值范围为1-100。
◇ retry：当apache将请求发送至后端服务器得到错误响应时等待多长时间以后再重试。单位是秒钟。
                                      
（3）、启动httpd服务
# service httpd start


apache使用mod_jk模块与tomcat进行通信
mod_jk是ASF的一个项目，是一个工作于apache端基于AJP协议与Tomcat通信的连接器，它是apache的一个模块，是AJP协议的客户端（服务端是Tomcat的AJP连接器）。

（1）、编译安装mod_jk
下载地址：http://tomcat.apache.org/connectors-doc/
# yum -y install httpd 
# yum -y install httpd-devel
# tar xf tomcat-connectors-1.2.42-src.tar.gz 
# cd /root/tomcat-connectors-1.2.42-src/native
# ./configure --with-apxs=apxs的目录 (如果没有apxs程序，需要安装httpd-devel包)
# make && make install

（2）、编辑httpd的配置文件/etc/httpd/conf.d/httpd-jk.conf
apache要使用mod_jk连接器，需要在启动时加载此连接器模块。为了便于管理与mod_jk模块相关的配置，这里使用一个专门的配置文件/etc/httpd/conf.d/httpd-jk.conf来保存相关指令及其设置。其内容如下：
LoadModule  jk_module modules/mod_jk.so
JkWorkersFile /etc/httpd/conf.d/workers.properties
JkLogFile logs/mod_jk.log
JkLogLevel debug
JkMount /* TomcatA
JkMount /status/ stat1
除了需要使用LoadModule指令在apache中装载模块外，mod_jk还需要在apache的主配置文件中设置其它一些指令来配置其工作属性。如JkWorkersFile则用于指定保存了worker相关工作属性定义的配置文件，JkLogFile则用于指定mod_jk模块的日志文件，JkLogLevel则可用于指定日志的级别（info, error, debug），此外还可以使用JkRequestLogFormat自定义日志信息格式。而JkMount（格式： JkMount  <URL to match>  <Tomcat worker name>）指定则用于控制URL与Tomcat workers的对应关系。

/etc/httpd/conf.d/workers.properties的内容如下：
worker.list=TomcatA,stat1
worker.TomcatA.port =8009
worker.TomcatA.host=172.16.1.100
worker.TomcatA.type=ajp13
worker.TomcatA.lbfactor=1
worker.stat1.type=status

根据其工作机制的不同，worker有多种不同的类型，这是需要为每个worker定义的一项属性woker.<work name>.type。常见的类型如下：
◇ ajp13：此类型表示当前worker为一个运行着的Tomcat实例。
◇ lb：lb即load balancing，专用于负载均衡场景中的woker；此worker并不真正负责处理用户请求，而是将用户请求调度给其它类型为ajp13的worker。
◇status：用户显示分布式环境中各实际worker工作状态的特殊worker，它不处理任何请求，也不关联到任何实际工作的worker实例。具体示例如请参见后文中的配置。

worker其它常见的属性说明：
◇ host：Tomcat 7的worker实例所在的主机；
◇ port：Tomcat 7实例上AJP1.3连接器的端口；
◇ connection_pool_minsize：最少要保存在连接池中的连接的个数；默认为pool_size/2；
◇ connection_pool_timeout：连接池中连接的超时时长；
◇ mount：由当前worker提供的context路径，如果有多个则使用空格格开；此属性可以由JkMount指令替代；
◇ retries：错误发生时的重试次数；
◇ socket_timeout：mod_jk等待worker响应的时长，默认为0，即无限等待；
◇ socket_keepalive：是否启用keep alive的功能，1表示启用，0表示禁用；
◇ lbfactor：worker的权重，可以在负载均衡的应用场景中为worker定义此属性

（3）、启动httpd服务
# service httpd start

（4）、安装配置tomcat
tomcat的安装这里就不在详述了。这里只给出tomcat的配置
编辑tomcat的配置文件server.xml，添加如下内容：
<Host name="www.xsl.com" appBase="webapps" unpackWARs="true" autoDeploy="true">
        <Context docBase="app1" path="a" reloadable="true" />
</Host>

并且将<Engine />这一行改为如下行：
 <Engine name="Catalina" defaultHost="localhost" jvmRoute="TomcatA">
这里的TomcatA要与此前的保持一致。

VIM 复制：
1、复制
1）单行复制
在命令模式下，将光标移动到将要复制的行处，按“yy”进行复制；
2）多行复制 
在命令模式下，将光标移动到将要复制的首行处，按“nyy”复制n行；其中n为1、2、3……
2、粘贴
在命令模式下，将光标移动到将要粘贴的行处，按“p”进行粘贴