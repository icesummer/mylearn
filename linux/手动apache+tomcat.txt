

apache+tomcat配置：
http://xslwahaha.blog.51cto.com/4738972/1741259
（1）、编译安装mod_jk
下载地址：http://tomcat.apache.org/connectors-doc/
# yum -y install httpd 
# yum -y install httpd-devel
# tar xf tomcat-connectors-1.2.42-src.tar.gz 
# cd /root/tomcat-connectors-1.2.42-src/native
# ./configure --with-apxs=apxs的路径 (如果没有apxs程序，需要安装httpd-devel包，which apxs查看路径)
# make && make install


1、安装tomcat
2、安装httpd
3、编译安装mod_jk
	apache使用mod_jk模块与tomcat进行通信（二之一）
	mod_jk是ASF的一个项目，是一个工作于apache端基于AJP协议与Tomcat通信的连接器，它是apache的一个模块，是AJP协议的客户端（服务端是Tomcat的AJP连接器）。
	具体安装见下文。
4、配置
	编辑/etc/httpd/conf.d/proxy.conf 
	编辑/etc/httpd/conf.d/httpd-jk.conf	使用LoadModule指令在apache中装载模块外
	编辑/etc/httpd/conf.d/workers.properties	mod_jk还需要在apache的主配置文件中设置其它一些指令来配置其工作属性
5、 在Tomcat的配置中设置jvmRoute：<Engine name="Catalina" defaultHost="localhost" jvmRoute="TomcatA"> 
6、以下是详细配置

	
四、将httpd+tomcat绑定
ajp链接
tomcat结合apache一起使用
apache与tomcat结合使用时，有2种模块可以与tomcat进行通信，这两种模块分别是mod_proxy模块和mod_jk模块。mod_proxy模块是apache自带的模块，因此要使用该模块，只需要启用该模块就行了。而mod_jk模块，需要下载并进行手动编译，使其成为apache的一个模块。

mod_proxy模块可以基于http协议与tomcat进行通信，也可以基于ajp协议与tomcat进行通信；而mod_jk模块只能基于ajp协议与tomcat进行通信。

apache使用mod_proxy模块与tomcat进行通信
其步骤如下：
（1）、apache使用mod_proxy模块与tomcat通信时，需要加载proxy_module、proxy_http_module、proxy_ajp_module、proxy_balancer_module（负载均衡时需要使用该模块）等这些模块。
# yum -y install httpd

查看apache是否已经启用该模块了。
# httpd -M | grep proxy
httpd: Could not reliably determine the server's fully qualified domain name, using localhost.localdomain for ServerName
 proxy_module (shared)
 proxy_balancer_module (shared)
 proxy_ftp_module (shared)
 proxy_http_module (shared)
 proxy_ajp_module (shared)
 proxy_connect_module (shared)

（2）、编辑httpd的配置文件/etc/httpd/conf.d/proxy.conf文件，添加如下内容：
proxyvia off
proxypreservehost on
proxyrequests off
proxypass / ajp://172.16.1.100/
proxypassreverse  / ajp://172.16.1.100/
        

如果你的http版本是2.4的话，其配置如下：
proxyvia off
proxypreservehost on
proxyrequests off
<Proxy *>
  Require all granted
</Proxy>
proxypass / ajp://172.16.1.100/
proxypassreverse  / ajp://172.16.1.100/
<Location  / >
  Require all granted
</Location>
                                           
如果要想基于http连接器协议与tomcat工作的话，只需要将ajp改为http即可。其他的配置都不变。   
关于如上apache指令的说明：
ProxyPreserveHost {On|Off}：如果启用此功能，代理会将用户请求报文中的Host:行发送给后端的服务器，而不再使用ProxyPass指定的服务器地址。如果想在反向代理中支持虚拟主机，则需要开启此项，否则就无需打开此功能。
ProxyVia  {On|Off|Full|Block}：用于控制在http首部是否使用Via:，主要用于在多级代理中控制代理请求的流向。默认为Off，即不启用此功能；On表示每个请求和响应报文均添加Via:；Full表示每个Via:行都会添加当前apache服务器的版本号信息；Block表示每个代理请求报文中的Via：都会被移除。
ProxyPassReverse：用于让apache调整HTTP重定向响应报文中的Location、Content-Location及URI标签所对应的URL，在反向代理环境中必须使用此指令避免重定向报文绕过proxy服务器。
ProxyRequests {On|Off}：是否开启apache正向代理的功能；启用此项时为了代理http协议必须启用proxy_http_module模块。同时，如果为apache设置了ProxyPass，则必须将ProxyRequests设置为Off。

ProxyPass  [path]  !|url  [key=value key=value ...]]：将后端服务器某URL与当前服务器的某虚拟路径关联起来作为提供服务的路径，path为当前服务器上的某虚拟路径，url为后端服务器上某URL路径。使用此指令时必须将ProxyRequests的值设置为Off。需要注意的是，如果path以“/”结尾，则对应的url也必须以“/”结尾，反之亦然。
另外，mod_proxy模块在httpd 2.1的版本之后支持与后端服务器的连接池功能，连接在按需创建在可以保存至连接池中以备进一步使用。连接池大小或其它设定可以通过在ProxyPass中使用key=value的方式定义。常用的key如下所示：
◇ min：连接池的最小容量，此值与实际连接个数无关，仅表示连接池最小要初始化的空间大小。
◇ max：连接池的最大容量，每个MPM都有自己独立的容量；都值与MPM本身有关，如Prefork的总是为1，而其它的则取决于ThreadsPerChild指令的值。
◇ loadfactor：用于负载均衡集群配置中，定义对应后端服务器的权重，取值范围为1-100。
◇ retry：当apache将请求发送至后端服务器得到错误响应时等待多长时间以后再重试。单位是秒钟。
                                      
（3）、启动httpd服务
# service httpd start


apache使用mod_jk模块与tomcat进行通信
mod_jk是ASF的一个项目，是一个工作于apache端基于AJP协议与Tomcat通信的连接器，它是apache的一个模块，是AJP协议的客户端（服务端是Tomcat的AJP连接器）。

（1）、编译安装mod_jk
下载地址：http://tomcat.apache.org/connectors-doc/
# yum -y install httpd 
# yum -y install httpd-devel
# tar xf tomcat-connectors-1.2.42-src.tar.gz 
# cd /root/tomcat-connectors-1.2.42-src/native
# ./configure --with-apxs=apxs的目录 (如果没有apxs程序，需要安装httpd-devel包)
# make && make install

（2）、编辑httpd的配置文件/etc/httpd/conf.d/httpd-jk.conf
apache要使用mod_jk连接器，需要在启动时加载此连接器模块。为了便于管理与mod_jk模块相关的配置，这里使用一个专门的配置文件/etc/httpd/conf.d/httpd-jk.conf来保存相关指令及其设置。其内容如下：
LoadModule  jk_module modules/mod_jk.so
JkWorkersFile /etc/httpd/conf.d/workers.properties
JkLogFile logs/mod_jk.log
JkLogLevel debug
JkMount /* TomcatA
JkMount /status/ stat1
除了需要使用LoadModule指令在apache中装载模块外，mod_jk还需要在apache的主配置文件中设置其它一些指令来配置其工作属性。如JkWorkersFile则用于指定保存了worker相关工作属性定义的配置文件，JkLogFile则用于指定mod_jk模块的日志文件，JkLogLevel则可用于指定日志的级别（info, error, debug），此外还可以使用JkRequestLogFormat自定义日志信息格式。而JkMount（格式： JkMount  <URL to match>  <Tomcat worker name>）指定则用于控制URL与Tomcat workers的对应关系。

/etc/httpd/conf.d/workers.properties的内容如下：
worker.list=TomcatA,stat1
worker.TomcatA.port =8009
worker.TomcatA.host=172.16.1.100
worker.TomcatA.type=ajp13
worker.TomcatA.lbfactor=1
worker.stat1.type=status

根据其工作机制的不同，worker有多种不同的类型，这是需要为每个worker定义的一项属性woker.<work name>.type。常见的类型如下：
◇ ajp13：此类型表示当前worker为一个运行着的Tomcat实例。
◇ lb：lb即load balancing，专用于负载均衡场景中的woker；此worker并不真正负责处理用户请求，而是将用户请求调度给其它类型为ajp13的worker。
◇status：用户显示分布式环境中各实际worker工作状态的特殊worker，它不处理任何请求，也不关联到任何实际工作的worker实例。具体示例如请参见后文中的配置。

worker其它常见的属性说明：
◇ host：Tomcat 7的worker实例所在的主机；
◇ port：Tomcat 7实例上AJP1.3连接器的端口；
◇ connection_pool_minsize：最少要保存在连接池中的连接的个数；默认为pool_size/2；
◇ connection_pool_timeout：连接池中连接的超时时长；
◇ mount：由当前worker提供的context路径，如果有多个则使用空格格开；此属性可以由JkMount指令替代；
◇ retries：错误发生时的重试次数；
◇ socket_timeout：mod_jk等待worker响应的时长，默认为0，即无限等待；
◇ socket_keepalive：是否启用keep alive的功能，1表示启用，0表示禁用；
◇ lbfactor：worker的权重，可以在负载均衡的应用场景中为worker定义此属性

（3）、启动httpd服务
# service httpd start

（4）、安装配置tomcat
tomcat的安装这里就不在详述了。这里只给出tomcat的配置
编辑tomcat的配置文件server.xml，添加如下内容：
<Host name="www.xsl.com" appBase="webapps" unpackWARs="true" autoDeploy="true">
        <Context docBase="app1" path="a" reloadable="true" />
</Host>

并且将<Engine />这一行改为如下行：
 <Engine name="Catalina" defaultHost="localhost" jvmRoute="TomcatA">
这里的TomcatA要与此前的保持一致。